#cloud-config
users:
  - name: ubuntu
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
  - name: ajasta
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']

# Install Docker and start containerized services
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release

runcmd:
  # Install Docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker ubuntu
  - usermod -aG docker ajasta
  
  # Create Docker network and volume
  - docker network create ajasta-net || true
  - docker volume create ajasta_pg_data || true
  
  # Get DockerHub user from environment or use default
  - export DOCKERHUB_USER="${DOCKERHUB_USER:-vladimirryrik}"
  - echo "Using DockerHub user: $DOCKERHUB_USER"
  
  # Pull and run PostgreSQL container
  - docker pull postgres:16-alpine
  - docker run -d --name ajasta-postgres --network ajasta-net -p 15432:5432 -e POSTGRES_DB=ajastadb -e POSTGRES_USER=admin -e POSTGRES_PASSWORD=adminpw -v ajasta_pg_data:/var/lib/postgresql/data postgres:16-alpine
  
  # Wait for PostgreSQL to be ready
  - sleep 30
  
  # Pull and run backend container
  - docker pull ${DOCKERHUB_USER:-vladimirryrik}/ajasta-backend:alpine || echo "Backend image not found on DockerHub, will build locally if needed"
  - docker run -d --name ajasta-backend --network ajasta-net -p 8090:8090 -e DB_URL=jdbc:postgresql://ajasta-postgres:5432/ajastadb -e DB_USERNAME=admin -e DB_PASSWORD=adminpw -e JWT_SECRET=change-me-production ${DOCKERHUB_USER:-vladimirryrik}/ajasta-backend:alpine || echo "Backend container failed to start"
  
  # Pull and run frontend container on port 80
  - docker pull ${DOCKERHUB_USER:-vladimirryrik}/ajasta-frontend:alpine || echo "Frontend image not found on DockerHub, will build locally if needed"
  - docker run -d --name ajasta-frontend --network ajasta-net -p 80:80 ${DOCKERHUB_USER:-vladimirryrik}/ajasta-frontend:alpine || echo "Frontend container failed to start"

write_files:
  - path: /opt/ajasta/start-containers.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      
      # Get DockerHub user from environment or use default
      DOCKERHUB_USER="${DOCKERHUB_USER:-vladimirryrik}"
      
      echo "Starting Ajasta containerized application..."
      echo "Using DockerHub user: $DOCKERHUB_USER"
      
      # Create network and volume if they don't exist
      docker network create ajasta-net 2>/dev/null || echo "Network ajasta-net already exists"
      docker volume create ajasta_pg_data 2>/dev/null || echo "Volume ajasta_pg_data already exists"
      
      # Stop and remove existing containers
      docker stop ajasta-frontend ajasta-backend ajasta-postgres 2>/dev/null || true
      docker rm ajasta-frontend ajasta-backend ajasta-postgres 2>/dev/null || true
      
      # Start PostgreSQL
      echo "Starting PostgreSQL container..."
      docker run -d --name ajasta-postgres \
        --network ajasta-net \
        -p 15432:5432 \
        -e POSTGRES_DB=ajastadb \
        -e POSTGRES_USER=admin \
        -e POSTGRES_PASSWORD=adminpw \
        -v ajasta_pg_data:/var/lib/postgresql/data \
        postgres:16-alpine
      
      # Wait for PostgreSQL to be ready
      echo "Waiting for PostgreSQL to be ready..."
      for i in {1..30}; do
        if docker exec ajasta-postgres pg_isready -U admin -d ajastadb >/dev/null 2>&1; then
          echo "PostgreSQL is ready!"
          break
        fi
        echo "Waiting for PostgreSQL... ($i/30)"
        sleep 2
      done
      
      # Start backend
      echo "Starting backend container..."
      docker run -d --name ajasta-backend \
        --network ajasta-net \
        -p 8090:8090 \
        -e DB_URL=jdbc:postgresql://ajasta-postgres:5432/ajastadb \
        -e DB_USERNAME=admin \
        -e DB_PASSWORD=adminpw \
        -e JWT_SECRET=change-me-production \
        $DOCKERHUB_USER/ajasta-backend:alpine
      
      # Start frontend on port 80
      echo "Starting frontend container on port 80..."
      docker run -d --name ajasta-frontend \
        --network ajasta-net \
        -p 80:80 \
        $DOCKERHUB_USER/ajasta-frontend:alpine
      
      echo "All containers started!"
      echo "Frontend: http://$(curl -s http://ifconfig.me) (port 80)"
      echo "Backend: http://$(curl -s http://ifconfig.me):8090"
      echo "PostgreSQL: $(curl -s http://ifconfig.me):15432"

  - path: /opt/ajasta/status.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      echo "=== Ajasta Container Status ==="
      docker ps --filter "name=ajasta-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
      echo ""
      echo "=== Container Logs (last 10 lines each) ==="
      for container in ajasta-postgres ajasta-backend ajasta-frontend; do
        if docker ps -q -f name=$container >/dev/null 2>&1; then
          echo "--- $container ---"
          docker logs --tail 10 $container 2>&1
          echo ""
        else
          echo "--- $container ---"
          echo "Error response from daemon: No such container: $container"
          echo ""
        fi
      done

  - path: /etc/systemd/system/ajasta-containers.service
    permissions: '0644'
    content: |
      [Unit]
      Description=Ajasta Containerized Application
      After=docker.service
      Requires=docker.service
      
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      Environment="DOCKERHUB_USER=vladimirryrik"
      ExecStart=/opt/ajasta/start-containers.sh
      ExecStop=/bin/bash -c 'docker stop ajasta-frontend ajasta-backend ajasta-postgres || true'
      TimeoutStartSec=300
      
      [Install]
      WantedBy=multi-user.target

  - path: /opt/ajasta/set-dockerhub-user.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      # Script to change DockerHub user and restart containers
      # Usage: ./set-dockerhub-user.sh <dockerhub_username>
      
      if [ $# -ne 1 ]; then
        echo "Usage: $0 <dockerhub_username>"
        echo "Current user: ${DOCKERHUB_USER:-vladimirryrik}"
        exit 1
      fi
      
      NEW_USER="$1"
      echo "Changing DockerHub user to: $NEW_USER"
      
      # Update systemd service
      sudo sed -i "s/Environment=\"DOCKERHUB_USER=.*/Environment=\"DOCKERHUB_USER=$NEW_USER\"/" /etc/systemd/system/ajasta-containers.service
      sudo systemctl daemon-reload
      
      # Export for current session
      export DOCKERHUB_USER="$NEW_USER"
      
      # Restart containers with new user
      echo "Restarting containers with new DockerHub user..."
      /opt/ajasta/start-containers.sh
      
      echo "DockerHub user changed to: $NEW_USER"
      echo "Containers restarted successfully!"

final_message: |
  Ajasta containerized application setup complete!
  
  The following containers are starting:
  - PostgreSQL (port 15432)
  - Backend API (port 8090) 
  - Frontend React app (port 80) - accessible via external IP
  
  DockerHub user: vladimirryrik (configurable via DOCKERHUB_USER env var)
  
  Useful commands:
  - Check container status: /opt/ajasta/status.sh
  - Restart containers: sudo systemctl restart ajasta-containers
  - Start containers manually: /opt/ajasta/start-containers.sh
  - Change DockerHub user: /opt/ajasta/set-dockerhub-user.sh <username>
  
  Expected DockerHub images:
  - vladimirryrik/ajasta-postgres:alpine
  - vladimirryrik/ajasta-backend:alpine  
  - vladimirryrik/ajasta-frontend:alpine
  
  Frontend is accessible on port 80 via the external IP address.