#cloud-config
# Cloud-init configuration for Ajasta App VM
# Идемпотентная настройка VM с установкой Docker и Docker Compose

# System update and upgrade
package_update: true
package_upgrade: true

# Install required packages
packages:
  - curl
  - wget
  - git
  - jq
  - htop
  - unzip
  - software-properties-common
  - apt-transport-https
  - ca-certificates
  - gnupg
  - lsb-release

# Create user and groups
users:
  - name: ubuntu
    groups: [sudo, docker]
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL

# Run commands to install Docker and Docker Compose
runcmd:
  # Install Docker
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  
  # Install Docker Compose standalone (for compatibility)
  - curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose
  - ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
  
  # Start and enable Docker service
  - systemctl start docker
  - systemctl enable docker
  
  # Add ubuntu user to docker group
  - usermod -aG docker ubuntu
  
  # Configure Docker daemon for optimization
  - |
    cat > /etc/docker/daemon.json << 'EOF'
    {
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "10m",
        "max-file": "3"
      },
      "storage-driver": "overlay2",
      "experimental": false,
      "live-restore": true
    }
    EOF
  - systemctl restart docker
  
  # Create directories for application
  - mkdir -p /opt/ajasta
  - chown ubuntu:ubuntu /opt/ajasta
  
  # Configure firewall (ufw)
  - ufw --force enable
  - ufw allow ssh
  - ufw allow 80/tcp
  - ufw allow 8090/tcp
  
  # Set up log rotation for application logs
  - |
    cat > /etc/logrotate.d/ajasta << 'EOF'
    /opt/ajasta/logs/*.log {
        daily
        missingok
        rotate 7
        compress
        delaycompress
        notifempty
        copytruncate
    }
    EOF
  
  # Create systemd service for automatic container management
  - |
    cat > /etc/systemd/system/ajasta-app.service << 'EOF'
    [Unit]
    Description=Ajasta Application
    Requires=docker.service
    After=docker.service
    
    [Service]
    Type=oneshot
    RemainAfterExit=yes
    WorkingDirectory=/home/ubuntu/deploy
    ExecStart=/usr/local/bin/docker-compose up -d
    ExecStop=/usr/local/bin/docker-compose down
    ExecReload=/usr/local/bin/docker-compose restart
    User=ubuntu
    Group=ubuntu
    
    [Install]
    WantedBy=multi-user.target
    EOF
  
  # Set system timezone
  - timedatectl set-timezone Europe/Moscow
  
  # Configure automatic security updates
  - |
    cat > /etc/apt/apt.conf.d/20auto-upgrades << 'EOF'
    APT::Periodic::Update-Package-Lists "1";
    APT::Periodic::Unattended-Upgrade "1";
    EOF
  - apt-get install -y unattended-upgrades
  
  # Install monitoring tools
  - apt-get install -y netdata
  - systemctl enable netdata
  - systemctl start netdata
  
  # Clean up package cache
  - apt-get clean
  - apt-get autoremove -y

# Write files
write_files:
  # Create a health check script
  - path: /usr/local/bin/health-check.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/bin/bash
      # Health check script for Ajasta App
      
      # Check if Docker is running
      if ! systemctl is-active --quiet docker; then
          echo "ERROR: Docker service is not running"
          exit 1
      fi
      
      # Check if containers are running
      cd /home/ubuntu/deploy 2>/dev/null || exit 1
      
      if ! docker-compose ps | grep -q "Up"; then
          echo "ERROR: Application containers are not running"
          exit 1
      fi
      
      # Check application health endpoints
      if ! curl -f http://localhost:8090/actuator/health &>/dev/null; then
          echo "WARNING: Backend health check failed"
      fi
      
      if ! curl -f http://localhost/ &>/dev/null; then
          echo "WARNING: Frontend health check failed"
      fi
      
      echo "OK: All services are running"
      exit 0

  # Create environment template
  - path: /home/ubuntu/.env.template
    permissions: '0644'
    owner: ubuntu:ubuntu
    content: |
      # Ajasta App Environment Configuration Template
      # Copy this file to .env and configure your values
      
      # Database Configuration
      POSTGRES_DB=ajastadb
      POSTGRES_USER=admin
      POSTGRES_PASSWORD=changeme
      POSTGRES_PORT=15432
      
      # Application Configuration
      JWT_SECRET=change-me-production-secret-key
      BACKEND_PORT=8090
      FRONTEND_PORT=3000
      
      # Mail Configuration (optional)
      MAIL_USERNAME=
      MAIL_PASSWORD=
      
      # AWS Configuration (optional)
      AWS_ACCESS_KEY_ID=
      AWS_SECRET_ACCESS_KEY=
      AWS_REGION=us-east-1
      AWS_S3_BUCKET=
      
      # Stripe Configuration (optional)
      STRIPE_PUBLIC_KEY=
      STRIPE_SECRET_KEY=
      
      # JVM Configuration
      JAVA_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0

# Set final system state
final_message: |
  Ajasta App VM initialization completed!
  
  Installed components:
  - Docker CE with Docker Compose
  - System monitoring (netdata)
  - Security updates (unattended-upgrades)
  - Health check script
  
  Next steps:
  1. Deploy your application using the deployment script
  2. Configure environment variables in /home/ubuntu/.env
  3. Access your application at http://VM_IP
  
  System is ready for deployment!

# Reboot after cloud-init completion to ensure all services are properly started
power_state:
  mode: reboot
  timeout: 300
  condition: true