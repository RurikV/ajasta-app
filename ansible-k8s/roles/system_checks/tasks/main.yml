---
# System checks and prerequisites for Kubernetes nodes (builtin-only)
# - Ensure system timezone is UTC (without community.general)
# - Ensure IP forwarding is enabled persistently and applied
# - Ensure SELinux is set to permissive (runtime and persistent) without ansible.posix
# - Ensure socat package is installed

- name: Get current timezone via timedatectl (if available)
  ansible.builtin.command: timedatectl show -p Timezone --value
  register: tz_cmd
  changed_when: false
  failed_when: false

- name: Set timezone to UTC via timedatectl
  ansible.builtin.command: timedatectl set-timezone UTC
  when:
    - tz_cmd.rc == 0
    - tz_cmd.stdout != "UTC"

- name: Read current /etc/localtime target (fallback path)
  ansible.builtin.command: readlink -f /etc/localtime
  register: localtime_link
  changed_when: false
  failed_when: false
  when: tz_cmd.rc != 0

- name: Set timezone to UTC by linking /etc/localtime (fallback)
  ansible.builtin.file:
    src: /usr/share/zoneinfo/UTC
    dest: /etc/localtime
    state: link
    force: true
  when:
    - tz_cmd.rc != 0
    - localtime_link.stdout is not search('/UTC$')

- name: Ensure /etc/timezone contains UTC (Debian/Ubuntu fallback)
  ansible.builtin.copy:
    dest: /etc/timezone
    content: "UTC\n"
    owner: root
    group: root
    mode: '0644'
  when: tz_cmd.rc != 0

- name: Ensure socat is installed
  ansible.builtin.package:
    name: socat
    state: present

- name: Ensure net.ipv4.ip_forward=1 in /etc/sysctl.d/k8s.conf (builtin-only)
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/k8s.conf
    regexp: '^net\\.ipv4\\.ip_forward'
    line: 'net.ipv4.ip_forward = 1'
    create: true
    owner: root
    group: root
    mode: '0644'
  register: ip_forward_conf

- name: Apply updated sysctl settings if ip_forward changed
  ansible.builtin.command: sysctl --system
  when: ip_forward_conf.changed

- name: Gather SELinux state
  ansible.builtin.command: getenforce
  register: getenforce_out
  changed_when: false
  failed_when: false
  when: ansible_selinux is defined and ansible_selinux.status != 'disabled'

- name: Set SELinux to permissive (runtime)
  ansible.builtin.command: setenforce 0
  when:
    - ansible_selinux is defined
    - ansible_selinux.status != 'disabled'
    - getenforce_out.stdout is defined
    - getenforce_out.stdout == "Enforcing"
  changed_when: true
  failed_when: false

- name: Ensure SELINUX=permissive in /etc/selinux/config (persistent)
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: 'SELINUX=permissive'
    backrefs: false
  when: ansible_selinux is defined
